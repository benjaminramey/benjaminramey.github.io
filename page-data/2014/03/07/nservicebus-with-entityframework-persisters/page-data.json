{"componentChunkName":"component---src-templates-post-js","path":"/2014/03/07/nservicebus-with-entityframework-persisters/","result":{"data":{"markdownRemark":{"html":"<h2>Update 1/13/2016</h2>\n<p>This code (much refactored and improved) is now available as a <a href=\"http://www.nuget.org/packages/GoodlyFere.NServiceBus.EntityFramework\">NuGet package</a>.</p>\n<p>Please see documentation and the code over at the <a href=\"https://github.com/benjaminramey/GoodlyFere.NServiceBus.EntityFramework\">GitHub repository</a>.</p>\n<h2>Summary</h2>\n<p>NServiceBus is easily configurable to use NHibernate, RavenDB or in-memory persistence. RavenDB is built in and is the default. You can configure it to use in-memory persistence. You can install a NuGet package to use NHibernate which opens the door to many data stores.</p>\n<p>So, for a recent project in which we were using NServiceBus, I decided to use NHibernate as the ORM for our simple domain model. I might just be dumb, but I ran into all sorts of problems with NHibernate and MS DTC when I used a remote SQL server. Try as I might, I just couldn't get NHibernate to work to persist my domain model even though it persisted the NServiceBus stuff just fine.</p>\n<p>I decided to switch over to EntityFramework for my domain model. NHibernate and EntityFramework coexisted just fine, but I wanted to use the same ORM for both NServiceBus and my domain model just to make things nice and clean. The problem is, there isn't a prepackaged solution (none that I found at least) out there to use EntityFramework with NServiceBus. I had to implement my own persistence classes for NServiceBus. As it turns out, that wasn't too hard. Below is a description of what you will need to do to get EntityFramework working as NServiceBus' persistence layer. Much of it was modeled directly off of the NHibernate persistence classes found here: <a href=\"https://github.com/Particular/NServiceBus.NHibernate\">https://github.com/Particular/NServiceBus.NHibernate</a>.</p>\n<p>Below are all the classes and interfaces I used to implement these persisters. Note that I have EF abstracted away through an IDataContext interface which the persisters use.</p>\n<ul>\n<li>IPersistSagas</li>\n<li>ISubscriptionStorage</li>\n<li>IPersistTimeouts</li>\n</ul>\n<p>Actually, this solution isn't tied specifically to EntityFramework.  I have EF abstracted away through an IDataContext interface which the persisters use.</p>\n<h2>IDataContext</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421173.js\" type=\"text/javascript\">\n</script>\n<h2>BaseDataContext</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421291.js\">\n</script>\n<h2>EFDataContext</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421303.js\">\n</script>\n<h2>IRepository</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421272.js\">\n</script>\n<h2>EFRepository</h2>\n<p>Not every method is implemented because I didn't need them all on this project. Using TDD, I only implemented methods as I needed them.</p>\n<script src=\"https://gist.github.com/benjaminramey/9421323.js\">\n</script>\n<h2>EFDbContext</h2>\n<p>This is the project-specific EntityFramework DbContext.</p>\n<script src=\"https://gist.github.com/benjaminramey/9421353.js\">\n</script>\n<h2>EFSagaPersister</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421364.js\">\n</script>\n<h2>EFSubscriptionPersister</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421372.js\">\n</script>\n<h2>EFTimeoutPersister</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421383.js\">\n</script>\n<h2>TimeoutDataEntity</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421403.js\">\n</script>\n<h2>Subscription</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421461.js\">\n</script>\n<h2>SagaData</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421470.js\">\n</script>\n<h2>Criteria classes</h2>\n<script src=\"https://gist.github.com/benjaminramey/9421428.js\">\n</script>","fields":{"slug":"/2014/03/07/nservicebus-with-entityframework-persisters/"},"frontmatter":{"title":"NServiceBus with EntityFramework Persisters","formattedDate":"Fri Mar 7th 2014","isoDate":"2014-03-07T00:00:00.000Z","fromNowDate":"8 years ago","categories":["programming"],"tags":["dotnet","nservicebus"]}},"site":{"siteMetadata":{"title":"Ben Ramey's Blog","tagline":"Scripture, programming problems, solutions and stories."}},"sitePage":{"path":"/dev-404-page/"}},"pageContext":{"slug":"/2014/03/07/nservicebus-with-entityframework-persisters/"}},"staticQueryHashes":[]}