{"componentChunkName":"component---src-templates-post-js","path":"/2016/04/11/owin-oauth-integration-testing-with-bearer-token/","result":{"data":{"markdownRemark":{"html":"<h2>Situation</h2>\n<p>The situation is pretty simple.  We have a project written with Web API 2.2\nthat we have running with OWIN.  The API requires user authorization.  To\naccomplish that, we use the OWIN OAuth libraries.</p>\n<p>Upon until recently, the OAuth authorization server (the thing that takes in\nthe user credentials and issues the token) and the API (the resource server) were\nhosted in the same site and web project.</p>\n<p>Integration testing was pretty easy at this point.  For the authorized calls,\nwe simply wrote helper methods that logged a test user in through the authorization\nserver (hosted along with the API in the OWIN test server), got a bearer token\nand then made the integration test calls.</p>\n<h2>Problem</h2>\n<p>When we recently decided to split the authorization server and resource server\ncode up into two separate code bases (so that they could be hosted separately)\nwe ran into issues with the authorization and API calls no longer being possible within a\nsingle integration test.  The code to generate the bearer token was now no\nlonger accessible in the test server for the API integration tests because the authorization\nserver was now designed to be hosted separately.  We'd have\nto somehow generate the bearer token without making a call with the OWIN test\nserver.</p>\n<h2>Solution</h2>\n<p>The solution is to generate a valid bearer token in your test code and send it\nalong with your test API call as you would have previous.  How to generate that\nvalid bearer token though??  It turns out to be easier than I thought.</p>\n<p>How you use OWIN's test server is beyond the scope of this blog post, but\neventually you'll have some code resembling this:</p>\n<p>  var server = TestServer.Create<Startup>();</p>\n<p>You'll have to use a overload of the <code class=\"highlight-text\">Create()</code> method to capture a reference\nto the server's <code class=\"highlight-text\">IDataProtector</code>.  This interface defines what OWIN OAuth will\nuse to encrypt a <code class=\"highlight-text\">ClaimsIdentity</code> into a valid bearer token.</p>\n<p>Update your server creation code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\">  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dataProtector<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> server <span class=\"token operator\">=</span> TestServer<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>app <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">Configuration</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    dataProtector <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDataProtector</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">OAuthBearerAuthenticationMiddleware</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Namespace<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Access_Token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You have to get the <code class=\"highlight-text\">dataProtector</code> this way because it's the same way that\nthe OWIN OAuth libraries get it before trying to decrypt the bearer token.\nSee the source for the OWIN OAuth code here:\n<a href=\"http://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.Security.OAuth/OAuthBearerAuthenticationMiddleware.cs\">OAuthBearerAuthenticationMiddleware.cs</a></p>\n<p>Once you've \"captured\" the <code class=\"highlight-text\">dataProtector</code>, in your integration test (or in some\nhelper code, probably) you can generate your <code class=\"highlight-text\">ClaimsIdentity</code> and then your\nbearer token with the <code class=\"highlight-text\">dataProtector</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\">  <span class=\"token comment\">// inside an integration test</span>\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create your valid identity any way you need to here</span>\n    <span class=\"token class-name\">ClaimsIdentity</span> identity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsIdentity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GenericIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// these classes are defined in the OWIN OAuth libraries.</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AuthenticationProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ticket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AuthenticationTicket</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TicketDataFormat</span><span class=\"token punctuation\">(</span>dataProtector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> bearerToken <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">Protect</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ... call your API through the test server with the bearer token...</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">CreateRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/someendpoint\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer \"</span> <span class=\"token operator\">+</span> bearerToken<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/2016/04/11/owin-oauth-integration-testing-with-bearer-token/"},"frontmatter":{"title":"OWIN Integration Testing with OAuth Bearer Tokens","formattedDate":"Mon Apr 11th 2016","isoDate":"2016-04-11T13:34:00.000Z","fromNowDate":"4 years ago","categories":["programming"],"tags":["owin",".net"]}},"site":{"siteMetadata":{"title":"Ben Ramey's Blog","tagline":"Scripture, programming problems, solutions and stories."}},"sitePage":{"path":"/dev-404-page/"}},"pageContext":{"slug":"/2016/04/11/owin-oauth-integration-testing-with-bearer-token/"}},"staticQueryHashes":[]}