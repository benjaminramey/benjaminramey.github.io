{"pageProps":{"tags":["dotnet"],"categories":["programming"],"title":"Converting an Interface Expression to a Concrete Expression","contentHtml":"<p>I had a case recently where I needed to convert a LINQ expression of the type of an interface and I needed to convert it to be based on a concrete implementation of that interface. I came up with the following solution, using an ExpressionVisitor and a simple helper method.</p>\n<p>First, the helper method in a static class.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Expression<span class=\"token punctuation\">&#x3C;</span>Func<span class=\"token punctuation\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">ConvertToConcreteExpression</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> TInterface<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&#x3C;</span>Func<span class=\"token punctuation\">&#x3C;</span>TInterface<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> interfaceExpression<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TInterface</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TConcrete</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TInterface must be assignable from TConcrete to convert an expression.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> TransformVisitor<span class=\"token operator\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> TInterface<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Transform</span><span class=\"token punctuation\">(</span>interfaceExpression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Here is the TransformVisitor class.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransformVisitor<span class=\"token punctuation\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> TInterface<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ExpressionVisitor</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ParameterExpression</span> _param <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Parameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TConcrete</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"param_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Expression<span class=\"token punctuation\">&#x3C;</span>Func<span class=\"token punctuation\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TransformVisitor<span class=\"token punctuation\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> TInterface<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newLambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Expression<span class=\"token operator\">&#x3C;</span>Func<span class=\"token operator\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">>></span><span class=\"token punctuation\">)</span>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> newLambda<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token generic-method\"><span class=\"token function\">VisitLambda</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression<span class=\"token punctuation\">&#x3C;</span>T<span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Func<span class=\"token punctuation\">&#x3C;</span>TInterface<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Expression<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Lambda</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>Func<span class=\"token punctuation\">&#x3C;</span>TConcrete<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _param\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">VisitLambda</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberExpression</span> node<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">.</span>DeclaringType<span class=\"token punctuation\">.</span><span class=\"token function\">IsAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TInterface</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">MakeMemberAccess</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TConcrete</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProperty</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">VisitMember</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterExpression</span> node<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span><span class=\"token function\">IsAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TInterface</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> _param<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">VisitParameter</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","date":"2013-01-23T06:00:00Z","slug":"/2013/01/23/converting-an-interface-expression-to-a-concrete-expression"},"__N_SSG":true}