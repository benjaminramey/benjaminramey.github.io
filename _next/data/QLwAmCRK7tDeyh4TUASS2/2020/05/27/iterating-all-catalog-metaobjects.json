{"pageProps":{"tags":["episerver","csharp","dotnet"],"categories":["programming"],"title":"Iterating All EPiServer Catalog MetaObjects","contentHtml":"<p>If you're maintaining an e-commerce-enabled site in EPiServer and you're using the built-in catalog, then\nyou have probably found the need to incorporate external data into the catalog, perhaps from various sources.</p>\n<p>Such is the case for me on an EPiServer site I've been working on over the last (almost) four years. The primary\ndata for the catalog comes into EPiServer from an external PIM system. But, then there is all sorts of ancillary\ndata that needs to calculated from existing fields or pulled from external sources. These external data sources\ndon't really provide a way to incrementally apply deltas for the data they provide. The only option to make updates is to walk\nthrough the entire catalog and see if anything needs updating when matched against the external data I've pulled.</p>\n<p>This external data is stored in the catalog as custom EPiServer MetaFields. So,\na need arose to easily walk through the entire catalog, pick up every MetaObject (to update the custom MetaFields)\nin every available catalog culture and make the appropriate updates.</p>\n<p>Below are the iterators I wrote to accomplish this. They let you walk the entire catalog tree (in a breadth-first manner)\nstarting from the top as if you were iterating a simple C# array or list.</p>\n<h2>High-Level Usage</h2>\n<p>Because all we're doing is writing iterators, the high-level usage looks just like you were interating through\nan <code>IEnumerable</code> in C# like an array or a <code>List&#x3C;T></code>.</p>\n<p>The iterators are implemented as extension methods on the <code>ICatalogSystem</code> interface. So, iterating through all\nof the catalog entry MetaObjects looks like this.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Mediachase<span class=\"token punctuation\">.</span>Commerce<span class=\"token punctuation\">.</span>Catalog</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Mediachase<span class=\"token punctuation\">.</span>MetaDataPlus</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ICatalogSystem</span> catalog <span class=\"token operator\">=</span> CatalogContext<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">MetaDataContext</span> mdc <span class=\"token operator\">=</span> MetaDataContext<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MetaDataContext</span> metaDataContext<span class=\"token punctuation\">)</span> entryMO <span class=\"token keyword\">in</span> catalog<span class=\"token punctuation\">.</span><span class=\"token function\">AllCatalogSystemEntryMetaObjects</span><span class=\"token punctuation\">(</span>mdc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    entryMO<span class=\"token punctuation\">.</span>metaObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"SomeCustomMetaFieldName\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"external data source value here\"</span><span class=\"token punctuation\">;</span>\n    entryMO<span class=\"token punctuation\">.</span>metaObject<span class=\"token punctuation\">.</span><span class=\"token function\">AcceptChanges</span><span class=\"token punctuation\">(</span>entryMO<span class=\"token punctuation\">.</span>metaDataContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>I implemented the separate iterators for NodeContent MetaObjects and the EntryContent\nMetaObjects. You easily use them in combination to iterate through the MetaObjects of the entire catalog tree.</p>\n<p>Note a couple of things from the example code above:</p>\n<ol>\n<li>You have to give the iterator the MetaDataContext. As we'll see in the iterator code, it will copy this MDC for each catalog language so that you get a MetaObject for every culture present in your catalog.</li>\n<li>Because of #1 above, the current MetaDataContext is passed to you during iteration so that you know which catalog culture this MetaObject is for.</li>\n</ol>\n<h2>Extension Method Code</h2>\n<p>The extension method code for AllCatalogSystemEntryMetaObjects is pretty simple. It uses four iterators in nested foreach loops to loop through</p>\n<ol>\n<li>All catalogs</li>\n<li>All nodes</li>\n<li>All entries</li>\n<li>All meta objects</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> MetaDataContext metaDataContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">AllCatalogSystemEntryMetaObjects</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span> <span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">MetaDataContext</span> metaDataContext<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> catalog <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemCatalogs</span><span class=\"token punctuation\">(</span>catalogSystem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> node <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemNodes</span><span class=\"token punctuation\">(</span>catalogSystem<span class=\"token punctuation\">,</span> catalog<span class=\"token punctuation\">.</span>CatalogId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entry <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemEntries</span><span class=\"token punctuation\">(</span>catalogSystem<span class=\"token punctuation\">,</span> catalog<span class=\"token punctuation\">.</span>CatalogId<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>CatalogNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tuple <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemEntryMetaObjects</span><span class=\"token punctuation\">(</span>metaDataContext<span class=\"token punctuation\">,</span> catalog<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> tuple<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>I broke the iteration down into separate iterators in this fashion so that I could easily iterate through all the entries (for example) in a single node, if I knew from the beginning which node I wanted to start at. If that was the case, I could easily write another extension method that took a node ID (or node code) as a parameter, use the ICatalogSystem to find that node and then pass the node ID to the CatalogSystemEntries iterator to iterate just the entries under that node.</p>\n<h2>Iterators</h2>\n<p>We have four iterators in use:</p>\n<ol>\n<li>CatalogSystemCatalogs - iterates through all catalogs</li>\n<li>CatalogSystemNodes - iterates through all nodes, in a breadth-first fashion, in a catalog</li>\n<li>CatalogSystemEntries - iterates through all entries in a node</li>\n<li>CatalogSystemEntryMetaObjects - iterates through all MetaObjects for an entry</li>\n</ol>\n<h3>CatalogSystemCatalogs Iterator</h3>\n<p>The code is pretty simple. We implement an IEnumerable which uses our implementation of an IEnumerator.</p>\n<p>The IEnumerator simply gets all the catalogs from the ICatalogSystem and, as you call MoveNext() (usually done for you by the foreach loop), increments an index value to give you the current CatalogDto.CatalogRow to work with.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemCatalogs</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">CatalogSystemCatalogEnumerator</span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemCatalogs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _enumerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemCatalogEnumerator</span><span class=\"token punctuation\">(</span>catalogSystem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemCatalogEnumerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatalogSystem</span> _catalogSystem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _catalogs<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemCatalogEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _catalogSystem <span class=\"token operator\">=</span> catalogSystem<span class=\"token punctuation\">;</span>\n        _catalogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GetCatalogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">CatalogDto<span class=\"token punctuation\">.</span>CatalogRow</span> Current\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _catalogs<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">[</span>_currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token punctuation\">.</span>Current <span class=\"token operator\">=></span> Current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_catalogs<span class=\"token punctuation\">.</span>IsValueCreated<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_currentIndex <span class=\"token operator\">>=</span> _catalogs<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _catalogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GetCatalogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Lst<span class=\"token punctuation\">&#x3C;</span>CatalogDto<span class=\"token punctuation\">.</span>CatalogRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetCatalogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _catalogSystem<span class=\"token punctuation\">.</span><span class=\"token function\">GetCatalogDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Catalog<span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>CatalogSystemNodes Iterator</h3>\n<p>For the nodes iterator, things get a little more complicated. Nodes can be nested, so we have tree structure we have to navigate. We use a Queue to walk through the nodes in a breadth-first fashion.</p>\n<p>I like to use as many functional programming techniques as I can in C# these days. I use the great <a href=\"https://github.com/louthy/language-ext\">LanguageExt</a> library for this. This library is where the <code>Que&#x3C;T></code>, <code>Option&#x3C;T></code> and <code>Lst&#x3C;T></code> data structures come from. I don't want to go in depth about what they are, but to understand the code below, you should now this: <code>Que&#x3C;T></code> is an immutable <code>Queue&#x3C;T></code>, <code>Lst&#x3C;T></code> is an immutable <code>List&#x3C;T></code> and <code>Option&#x3C;T></code> is basically the functional way to do the null-object pattern (instead of dealing with nulls, use an object to represent \"I don't have a value\").</p>\n<p>If you're not familiar with breadth-first tree traversals, it's not too complicated. What we do first is get all the nodes at the top level (in our case, all the nodes that are direct children of the catalog we pass in) and put them in the queue. Then, we iterate through each of the nodes we put in the queue and add their child nodes to the queue. We do this until we run out of nodes to process in the queue which indicates we've gone through all nodes in the tree.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemNodes</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">CatalogSystemNodeEnumerator</span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> catalogId<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startingParentNodeId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _enumerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemNodeEnumerator</span><span class=\"token punctuation\">(</span>catalogSystem<span class=\"token punctuation\">,</span> catalogId<span class=\"token punctuation\">,</span> startingParentNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemNodeEnumerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Que<span class=\"token punctuation\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> _nodeQue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatalogSystem</span> _catalogSystem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _catalogId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _startingParentNodeId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Option<span class=\"token punctuation\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token punctuation\">></span></span> _current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// We have a parameter for the starting node ID (startingParentNodeId) which defaults to 0.  If you</span>\n    <span class=\"token comment\">// pass in a node ID, we'll start iterating child nodes of that node.  If you don't pass a value (keep</span>\n    <span class=\"token comment\">// the default of 0), then we'll iterate through all nodes in the catalog.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemNodeEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> catalogId<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startingParentNodeId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _catalogSystem <span class=\"token operator\">=</span> catalogSystem<span class=\"token punctuation\">;</span>\n        _catalogId <span class=\"token operator\">=</span> catalogId<span class=\"token punctuation\">;</span>\n        _startingParentNodeId <span class=\"token operator\">=</span> startingParentNodeId<span class=\"token punctuation\">;</span>\n        _nodeQue <span class=\"token operator\">=</span> Prelude<span class=\"token punctuation\">.</span><span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span>_startingParentNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _current <span class=\"token operator\">=</span> Option<span class=\"token operator\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ValueUnsafe() lets us get the value of _current (which is an Option&#x3C;T>)</span>\n    <span class=\"token comment\">// or null if the Option&#x3C;T> has no value.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow</span> Current <span class=\"token operator\">=></span> _current<span class=\"token punctuation\">.</span><span class=\"token function\">ValueUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token punctuation\">.</span>Current <span class=\"token operator\">=></span> Current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// end-case scenario--we've run out of nodes in the queue, so we're</span>\n        <span class=\"token comment\">// done traversing the node tree</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_nodeQue<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nextNodeId <span class=\"token operator\">=</span> <span class=\"token function\">GetNextNodeIdAndUpdateQue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// special starting condition when we want to do the entire tree</span>\n        <span class=\"token comment\">// and no other starting node was passed in</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextNodeId <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// special case of there being a catalog node with no category nodes beneath it</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_nodeQue<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            nextNodeId <span class=\"token operator\">=</span> <span class=\"token function\">GetNextNodeIdAndUpdateQue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        _current <span class=\"token operator\">=</span> <span class=\"token function\">GetNode</span><span class=\"token punctuation\">(</span>nextNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> _current<span class=\"token punctuation\">.</span>IsSome<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetNextNodeIdAndUpdateQue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// get the next node ID from the queue</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nextNodeId <span class=\"token operator\">=</span> _nodeQue<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// remove the retrieved node from the queue</span>\n        _nodeQue <span class=\"token operator\">=</span> _nodeQue<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// get all of this node's children and add their IDs to the queue</span>\n        _nodeQue <span class=\"token operator\">=</span> <span class=\"token function\">GetChildren</span><span class=\"token punctuation\">(</span>nextNodeId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Fold</span><span class=\"token punctuation\">(</span>_nodeQue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> nodeRow<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> q<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>nodeRow<span class=\"token punctuation\">.</span>CatalogNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> nextNodeId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Option<span class=\"token punctuation\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nodeId<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _catalogSystem<span class=\"token punctuation\">.</span><span class=\"token function\">GetCatalogNodeDto</span><span class=\"token punctuation\">(</span>nodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CatalogNode<span class=\"token punctuation\">.</span><span class=\"token function\">HeadOrNone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Lst<span class=\"token punctuation\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nodeId<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _catalogSystem<span class=\"token punctuation\">.</span><span class=\"token function\">GetCatalogNodesDto</span><span class=\"token punctuation\">(</span>_catalogId<span class=\"token punctuation\">,</span> nodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CatalogNode<span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _nodeQue <span class=\"token operator\">=</span> Prelude<span class=\"token punctuation\">.</span><span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span>_startingParentNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _current <span class=\"token operator\">=</span> Option<span class=\"token operator\">&#x3C;</span>CatalogNodeDto<span class=\"token punctuation\">.</span>CatalogNodeRow<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>CatalogSystemEntries Iterator</h3>\n<p>Since entries cannot be arrange in a nested fashion, this iterator is a little less complicated than the nodes iterator. All we do is take in a catalogId and a catalogNodeId and retrieve all the entries below the given node ID, passing them to you one at a time as you call MoveNext().</p>\n<p>The only mildly complex thing here is that we use a <code>Lazy&#x3C;T></code> so that we're not retrieving the entries immediately when you instanstiate the IEnumerator. We only load the entries when you MoveNext() and access Current which indicates you really do want some entries.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemEntries</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">CatalogSystemEntryEnumerator</span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemEntries</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> catalogId<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> catalogNodeId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _enumerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemEntryEnumerator</span><span class=\"token punctuation\">(</span>catalogSystem<span class=\"token punctuation\">,</span> catalogId<span class=\"token punctuation\">,</span> catalogNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemEntryEnumerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatalogSystem</span> _catalogSystem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _entries<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _catalogNodeId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _catalogId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// we take in the catalogNodeId to start at so that you could use this IEnumerator</span>\n    <span class=\"token comment\">// to collect entries at any starting node in the catalog.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemEntryEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICatalogSystem</span> catalogSystem<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> catalogId<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> catalogNodeId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _catalogSystem <span class=\"token operator\">=</span> catalogSystem<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// we use a Lazy&#x3C;T> object here so that we don't do a database call</span>\n        <span class=\"token comment\">// as soon as you instantiate this class.  We only do it once you</span>\n        <span class=\"token comment\">// access Current, indicating you really want to iterate the entries now</span>\n        _entries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GetEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _catalogNodeId <span class=\"token operator\">=</span> catalogNodeId<span class=\"token punctuation\">;</span>\n        _catalogId <span class=\"token operator\">=</span> catalogId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow</span> Current\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _entries<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">[</span>_currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token punctuation\">.</span>Current <span class=\"token operator\">=></span> Current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// the first MoveNext() call will be when when _entries doesn't have</span>\n        <span class=\"token comment\">// a value yet (but will after Current is accessed).  So, this leaves</span>\n        <span class=\"token comment\">// the _currentIndex at 0 the first time MoveNext() is called.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_entries<span class=\"token punctuation\">.</span>IsValueCreated<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// we just incremented _currentIndex to the count of the _entries list,</span>\n        <span class=\"token comment\">// so we return false to indicate there are no more values.  We really could</span>\n        <span class=\"token comment\">// use == here instead of >=.  I guess >= feels safer for some reason.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_currentIndex <span class=\"token operator\">>=</span> _entries<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _entries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GetEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Lst<span class=\"token punctuation\">&#x3C;</span>CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _catalogSystem<span class=\"token punctuation\">.</span><span class=\"token function\">GetCatalogEntriesDto</span><span class=\"token punctuation\">(</span>_catalogId<span class=\"token punctuation\">,</span> _catalogNodeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CatalogEntry<span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>CatalogSystemEntryMetaObjects Iterator</h3>\n<p>The MetaObjects iterator is a different than the other iterators in that it doesn't really iterate through a list or tree of MetaObjects. Instead, it iterates through all fo the MetaObject instances for a particular entry--one instance for reach culture available for the catalog.</p>\n<p>So, as you'll see in the code below, one of the first things we do is grab all of the languages for the catalog so that we know what we need to interate through.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemEntryMetaObjects</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> MetaDataContext metaDataContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">CatalogSystemEntryMetaObjectsEnumerator</span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemEntryMetaObjects</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaDataContext</span> metaDataContext<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CatalogDto<span class=\"token punctuation\">.</span>CatalogRow</span> catalog<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow</span> entry<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _enumerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CatalogSystemEntryMetaObjectsEnumerator</span><span class=\"token punctuation\">(</span>metaDataContext<span class=\"token punctuation\">,</span> catalog<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> MetaDataContext metaDataContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatalogSystemEntryMetaObjectsEnumerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerator<span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> MetaDataContext metaDataContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow</span> _entry<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MetaDataContext</span> _metaDataContext<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CultureInfo<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _catalogLanguages<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">CatalogDto<span class=\"token punctuation\">.</span>CatalogRow</span> _catalog<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatalogSystemEntryMetaObjectsEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaDataContext</span> metaDataContext<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">CatalogDto<span class=\"token punctuation\">.</span>CatalogRow</span> catalog<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">CatalogEntryDto<span class=\"token punctuation\">.</span>CatalogEntryRow</span> entry<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _catalog <span class=\"token operator\">=</span> catalog<span class=\"token punctuation\">;</span>\n        _entry <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">;</span>\n        _metaDataContext <span class=\"token operator\">=</span> metaDataContext<span class=\"token punctuation\">;</span>\n        _catalogLanguages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CultureInfo<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GetCatalogLanguages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> MetaDataContext metaDataContext<span class=\"token punctuation\">)</span></span> Current\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// what we're really iterating through is the catalog languages.</span>\n            <span class=\"token comment\">// as we iterate through them, we grab the associate MetaObject for the current</span>\n            <span class=\"token comment\">// language for the given entry</span>\n            <span class=\"token class-name\">CultureInfo</span> currentCultureInfo <span class=\"token operator\">=</span> _catalogLanguages<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">[</span>_currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mdc <span class=\"token operator\">=</span> _metaDataContext<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mdc<span class=\"token punctuation\">.</span>UseCurrentThreadCulture <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            mdc<span class=\"token punctuation\">.</span>Language <span class=\"token operator\">=</span> currentCultureInfo<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>MetaObject<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>mdc<span class=\"token punctuation\">,</span> _entry<span class=\"token punctuation\">.</span>CatalogEntryId<span class=\"token punctuation\">,</span> _entry<span class=\"token punctuation\">.</span>MetaClassId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mdc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token punctuation\">.</span>Current <span class=\"token operator\">=></span> Current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// As with the Lazy&#x3C;T> for iterating through the entries, the first tie MoveNext() is called</span>\n        <span class=\"token comment\">// the _catalogLanguages Lazy&#x3C;T> will not have a value.  It will after the first Current access.</span>\n        <span class=\"token comment\">// So, for the first MoveNext(), we want to keep the _currentIndex at 0, which is what this if-statement</span>\n        <span class=\"token comment\">// accomplishes.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_catalogLanguages<span class=\"token punctuation\">.</span>IsValueCreated<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_currentIndex <span class=\"token operator\">>=</span> _catalogLanguages<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _catalogLanguages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&#x3C;</span>Lst<span class=\"token punctuation\">&#x3C;</span>CultureInfo<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GetCatalogLanguages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Lst<span class=\"token punctuation\">&#x3C;</span>CultureInfo<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetCatalogLanguages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _catalog<span class=\"token punctuation\">.</span><span class=\"token function\">GetCatalogLanguageRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>lr <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CultureInfo</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">.</span>LanguageCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Warning</h2>\n<p>Even though the above code will give you the convenience of iterating through your entire EPiServer catalog(s), be warned! You could easily forget what the IEnumerators really do above and do something like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// REALLY BAD CODE, DON'T DO</span>\n<span class=\"token class-name\">List<span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> MetaDataContext mdc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">></span></span> allTheMetaObjects <span class=\"token operator\">=</span> _catalogSystem<span class=\"token punctuation\">.</span><span class=\"token function\">AllCatalogSystemEntryMetaObjects</span><span class=\"token punctuation\">(</span>mdc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>I hope you see the danger of this. If you have a large catalog, you're loading the ENTIRE set of MetaObjects into memory in your <code>allTheMetaObjects</code> list. This probably won't be good for your application. If you have a small catalog, this might not be a big deal. But, keep this in mind!</p>\n","date":"2020-05-27T06:00:00Z","slug":"/2020/05/27/iterating-all-catalog-metaobjects"},"__N_SSG":true}