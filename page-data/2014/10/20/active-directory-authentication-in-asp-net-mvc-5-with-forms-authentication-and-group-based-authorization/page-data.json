{"componentChunkName":"component---src-templates-post-js","path":"/2014/10/20/active-directory-authentication-in-asp-net-mvc-5-with-forms-authentication-and-group-based-authorization/","result":{"data":{"markdownRemark":{"html":"<p>I know that blog post title is sure a mouth-full, but it describes the whole problem I was trying to solve in a recent project.</p>\n<h2>The Project</h2>\n<p>Let me outline the project briefly.  We were building a report dashboard-type site that will live inside the client's network.  The dashboard gives an overview of various, very important information that relates to how the company is performing on a hourly basis.  So, the dashboard is only available to a certain group of directors.</p>\n<p>To limit the solution to the these directors, authentication and authorization would go through their existing Active Directory setup by putting the authorized users in a special AD group.</p>\n<h2>The Problem</h2>\n<p>Getting authentication to work was a snap.  Microsoft provides the System.Web.Security.ActiveDirectoryMembershipProvider\nclass to use as your membership provider.  Putting an <code class=\"highlight-text\">[Authorize]</code> attribute on my action methods or entire controllers was all I needed to get it working (besides, of course, the system.web/authentication web.config updates and a controller to show my login form and handle the submit credentials).</p>\n<p>Here's my relevant web.config setup:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"highlight-xml\"><code class=\"highlight-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>connectionStrings</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ADConnectionString<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">connectionString</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;ldap connection string here><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>connectionStrings</span><span class=\"token punctuation\">></span></span>\nâ€¦\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>authentication</span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Forms<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>forms</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.AuthCookie<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loginUrl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>~/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>authentication</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>membership</span> <span class=\"token attr-name\">defaultProvider</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ADMembershipProvider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>providers</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>clear</span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ADMembershipProvider<span class=\"token punctuation\">\"</span></span>\n                 <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.Web.Security.ActiveDirectoryMembershipProvider<span class=\"token punctuation\">\"</span></span>\n                 <span class=\"token attr-name\">connectionStringName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ADConnectionString<span class=\"token punctuation\">\"</span></span>\n                 <span class=\"token attr-name\">attributeMapUsername</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sAMAccountName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>providers</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>membership</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The tough part came when I wanted to limit access to users in that AD group. Microsoft doesn't provide a RoleProvider along with its ActiveDirectoryMembershipProvider. So, what to do?</p>\n<p>I tried several methods I found online. Most of them were based on creating my own custom RoleProvider and querying AD to iterate through the user's groups (treating them like roles) and seeing if one of them matched my AD group I was looking for. However, I could never get it to work. Each code example I found eventually gave me this AD error when I iterated through the current user's AD groups:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"highlight-text\"><code class=\"highlight-text\">The specified directory service attribute or value does not exist.</code></pre></div>\n<h2>The Solution</h2>\n<p>Eventually, I found a solution online that worked. Instead of setting up a custom RoleProvider, all it involved was creating a custom AuthorizeAttribute for your MVC controllers (or action methods) that checked the user's .IsMemberOf method to see if the member belonged the sought after group (or groups). I don't know why this method does not cause the same AD error as describe above, but I'm glad it doesn't! All I can assume is that it queries AD in a more friendly way.</p>\n<p>Here is my custom AuthorizeAttribute:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeADAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AuthorizeAttribute</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> _authenticated<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> _authorized<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Groups <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">HandleUnauthorizedRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleUnauthorizedRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_authenticated <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>_authorized<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            filterContext<span class=\"token punctuation\">.</span>Result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RedirectResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error/notauthorized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">AuthorizeCore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpContextBase</span> httpContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _authenticated <span class=\"token operator\">=</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AuthorizeCore</span><span class=\"token punctuation\">(</span>httpContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_authenticated<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>Groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _authorized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> _authorized<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groups <span class=\"token operator\">=</span> Groups<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string character\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username <span class=\"token operator\">=</span> httpContext<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                _authorized <span class=\"token operator\">=</span> LDAPHelper<span class=\"token punctuation\">.</span><span class=\"token function\">UserIsMemberOfGroups</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> _authorized<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Error attempting to authorize user\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _authorized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> _authorized<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        _authorized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _authorized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that I also included a little code to distinguish between the user not being authenticated (which the call to base.AuthorizeCore takes care of) and not being authorized. Without the code in HandleUnauthorizedRequest, if the user successfully logs in but is not in the AD group, he just sees the log in screen again which doesn't communicate the problem very well.</p>\n<p>The this.Log() code uses a Nuget package called this.Log. The LDAPHelper class is something I wrote. The code is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LDAPHelper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetLDAPContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Uri</span> ldapUri<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ParseLDAPConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> ldapUri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> HttpUtility<span class=\"token punctuation\">.</span><span class=\"token function\">UrlDecode</span><span class=\"token punctuation\">(</span>ldapUri<span class=\"token punctuation\">.</span>PathAndQuery<span class=\"token punctuation\">.</span><span class=\"token function\">TrimStart</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetLDAPHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Uri</span> ldapUri<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ParseLDAPConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> ldapUri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> ldapUri<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ParseLDAPConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">Uri</span> ldapUri<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connString <span class=\"token operator\">=</span> ConfigurationManager<span class=\"token punctuation\">.</span>ConnectionStrings<span class=\"token punctuation\">[</span><span class=\"token string\">\"ADConnectionString\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ConnectionString<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> Uri<span class=\"token punctuation\">.</span><span class=\"token function\">TryCreate</span><span class=\"token punctuation\">(</span>connString<span class=\"token punctuation\">,</span> UriKind<span class=\"token punctuation\">.</span>Absolute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> ldapUri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">UserIsMemberOfGroups</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> groups<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* Return true immediately if the authorization is not\n        locked down to any particular AD group */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>groups <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> groups<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Verify that the user is in the given AD group (if any)</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> context <span class=\"token operator\">=</span> <span class=\"token function\">BuildPrincipalContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userPrincipal <span class=\"token operator\">=</span> UserPrincipal<span class=\"token punctuation\">.</span><span class=\"token function\">FindByIdentity</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span>\n                IdentityType<span class=\"token punctuation\">.</span>SamAccountName<span class=\"token punctuation\">,</span>\n                username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">in</span> groups<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userPrincipal<span class=\"token punctuation\">.</span><span class=\"token function\">IsMemberOf</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> IdentityType<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">group</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">PrincipalContext</span> <span class=\"token function\">BuildPrincipalContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> container <span class=\"token operator\">=</span> LDAPHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetLDAPContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PrincipalContext</span><span class=\"token punctuation\">(</span>ContextType<span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>My code is mostly based on example code I found on a very helpful <a href=\"http://stackoverflow.com/questions/4342271/asp-net-mvc-forms-authorization-with-active-directory-groups/4383502#4383502\">StackOverflow post</a>.</p>\n<p>To use this code, all you have to do is use your custom AuthorizeAttribute instead of the built-in one. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">AuthorizeAD</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Groups<span class=\"token operator\">=</span><span class=\"token string\">\"Some AD group name\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Controller</span></span>\n<span class=\"token punctuation\">{</span>\nâ€¦\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/2014/10/20/active-directory-authentication-in-asp-net-mvc-5-with-forms-authentication-and-group-based-authorization/"},"frontmatter":{"title":"Active Directory Authentication in ASP.NET MVC 5 with Forms Authentication and Group-Based Authorization","formattedDate":"Mon Oct 20th 2014","isoDate":"2014-10-20T09:03:00.000Z","fromNowDate":"6 years ago","categories":["programming"],"tags":["mvc","asp-net","active-directory"]}},"site":{"siteMetadata":{"title":"Ben Ramey's Blog","tagline":"Scripture, programming problems, solutions and stories."}},"sitePage":{"path":"/dev-404-page/"}},"pageContext":{"slug":"/2014/10/20/active-directory-authentication-in-asp-net-mvc-5-with-forms-authentication-and-group-based-authorization/"}},"staticQueryHashes":[]}