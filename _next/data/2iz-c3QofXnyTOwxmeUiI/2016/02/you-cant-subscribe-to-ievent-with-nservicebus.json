{"pageProps":{"tags":["dotnet","nservicebus"],"categories":["programming"],"title":"You Can't Subscribe to IEvent with NServiceBus","contentHtml":"<p>The reason you might want to subscribe to <code>IEvent</code> is pretty straightforward. I\nwanted to do it for the simple reason of wanting to be able to choose (based\non configuration) whether I wanted to notify anyone of any event that\ncould be published on my bus.</p>\n<p>In other words, whenever an event of any type was published, I wanted one particular\nendpoint to subscribe to that event and then decide whether it should do\nanything with it.</p>\n<p>I thought the code to do that should be pretty simple. Since all published\nevents <em>should</em> implement the <code>IEvent</code> interface and NServiceBus supports\npolymorphism in its message handling, creating a message handler that\nimplemented <code>IHandleMessages&#x3C;IEvent></code> should be all I should have needed!</p>\n<p>I was testing this with only partial success and so I thought it was working.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IHandleMessages<span class=\"token punctuation\">&#x3C;</span>IEvent<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEvent</span> message<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>My Partial Success</h2>\n<p>The reason I had partial success was because I was also <em>explicitly</em> handling\nother events in the same endpoint on a special saga I had setup. So, when\nthe endpoint started up, it would subscribe to these events. At first, I only\nwanted to send notifications for these events anyway, so it all seemed to be\nworking. My special <code>IEvent</code> would work because the <code>Saga</code> subscribed this same\nendpoint to those few events explicitly.</p>\n<h2>My Full Failure</h2>\n<p>I realized I had only partially succeeded when I started wanting to send notifications\nfor other events that were not in that <code>Saga</code>. I dug into the issue for a few\nhours and finally began to wonder if NServiceBus (or maybe the RabbitMQ transport)\nwas explicitly ignoring <code>IEvent</code> when it setup subscriptions.</p>\n<p>Sure enough, it does.</p>\n<p>To build a list of types to subscribe to, NServiceBus uses the <code>Conventions</code>\nclass in the <code>NServiceBus.Core</code> namespace. One of the checks that code does\nis to filter the list of potential types with the <code>IsEventType</code> method. This\nmethod checks if the <code>Type</code> is in a Particular (NServiceBus) DLL. See the\ncode here: <a href=\"https://github.com/Particular/NServiceBus/blob/e4bc405509e3b9c3fc91e21a56333bb40ac54a60/src/NServiceBus.Core/Conventions.cs#L154\">IsEventType</a></p>\n<h2>My Solution</h2>\n<p>The solution is simple enough. Instead of listening to <code>IEvent</code>, listen\nto a custom interface that you implement on all of your events. This is probably\nmore close to what you are trying to do anyway--listen to all events that your\nsystem produces.</p>\n<p>So, I simply created a marker interface called <code>ICustomEvent</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ICustomEvent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEvent</span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Then, on all of my bus event classes, instead of implementing <code>IEvent</code> directly,\nI implemented <code>ICustomEvent</code>.</p>\n<p>My handler then looked like this.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IHandleMessages<span class=\"token punctuation\">&#x3C;</span>ICustomEvent<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICustomEvent</span> message<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now, the right subscriptions are all set up and my single handler gets\nevery single event published by my entire bus.</p>\n","date":"2016-02-25T00:00:00Z","slug":"/2016/02/you-cant-subscribe-to-ievent-with-nservicebus"},"__N_SSG":true}