{"componentChunkName":"component---src-templates-post-js","path":"/2016/08/24/castle-windsor-typedfactoryfacility-and-property-injection/","result":{"data":{"markdownRemark":{"html":"<p>I finally got to the bottom of an issue today that came down to the way Castle.Windsor\ndoes property injection (injecting dependencies into public properties) when\nyou are also using their TypedFactoryFacility.  It was a tough one to track down, so\nI thought I'd put the solution out there for everyone else's benefit.</p>\n<h2>The Problem</h2>\n<p>Here's what the problem looked like.</p>\n<h3>The Error Message</h3>\n<p>First things first, this is what the symptom looked like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"highlight-text\"><code class=\"highlight-text\">[ComponentNotFoundException: No component for supporting the service System.Threading.Tasks.Task was found]\n   Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy) +120\n   Castle.Facilities.TypedFactory.Internal.TypedFactoryInterceptor.Resolve(IInvocation invocation) +147\n   Castle.Facilities.TypedFactory.Internal.TypedFactoryInterceptor.Intercept(IInvocation invocation) +123\n   Castle.DynamicProxy.AbstractInvocation.Proceed() +448\n   Castle.Proxies.Func`2Proxy.Invoke(OAuthMatchEndpointContext arg) +168\n\n   ...</code></pre></div>\n<p>This is actually a pretty standard error when you're using Castle.Windsor. It usually\nmeans Windsor tried to resolve some dependency but discovered that it was missing a\nregistration.  Translation: you forgot to register a component or type in your Windsor\nsetup.  Usually it's an easy fix; just register your dependency properly.</p>\n<p>In this case, however, as you can see, the missing registration was of type\nSystem.Threading.Tasks.Task.  I didn't have any dependencies on the <code class=\"highlight-text\">Task</code> class and so\nI didn't want to \"fix\" any Windsor setup to register it.  This wasn't making sense.</p>\n<h3>Step One: TypedFactoryInterceptor?</h3>\n<p>The first oddity I noticed was that this error was happening somewhere in the flow\nof the TypedFactoryInterceptor.  I could tell where the error was coming from in my\ncode (from the rest of the stack trace that I didn't include above).  The problem\nwas that it had nothing to do with any TypedFactoryFacility.</p>\n<p>So, I inspected my registrations a little closer.  I basically had a setup like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildClass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ParentClass</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentClass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IInterface</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>Options<span class=\"token punctuation\">,</span> Task<span class=\"token punctuation\">></span></span> OnDoSomething <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>Options<span class=\"token punctuation\">,</span> Task<span class=\"token punctuation\">></span></span> OnDoSomethingElse <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">OnDoSomething</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">DoSomethingElse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> OnDoSomethingElse<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice a couple of things.</p>\n<ol>\n<li>ParentClass has several virtual methods.  I'm only overriding one.</li>\n<li>ParentClass is setup to allow you to override the virtual methods or to just supply\nit with Funcs.</li>\n<li>The implementation of the virtual methods is to simply call the corresponding Funcs.</li>\n</ol>\n<h3>Finding the Location of the Problem</h3>\n<p>After lots of testing and debugging, I finally figured out that somehow a FuncProxy\n(see line 6 in the error stack trace above) was being injected into all of the\npublic <code class=\"highlight-text\">Func&lt;,&gt;</code> properties on ParentClass.  Then, when methods were called that\nI did not override in my ChildClass, the Func would be called in the ParentClass\nand that's where Windsor was hooking in and eventually causing an error when it\neventually tried to resolve a dependency on <code class=\"highlight-text\">Task</code>.</p>\n<h3>One More Clue</h3>\n<p>As I mentioned above, the presence of a TypedFactoryInterceptor in the stack trace\nwas strange to me.  I wasn't using Windor's TypedFactoryFacility to register my ChildClass.\nSo, why was it sticking its nose into my class somehow?</p>\n<p>I did some simple debugging and turned off the TypedFactoryFacility in my Windsor setup.\nJust like magic,\nthe error I was seeing went away.  So, my conclusion: somehow TypedFactoryFacility was\ninserting itself into my ChildClass registration and injecting <code class=\"highlight-text\">FuncProxy</code>s into the\nParentClass public <code class=\"highlight-text\">Func&lt;,&gt;</code> properties.</p>\n<h2>The Solution</h2>\n<p>This looked an aweful lot like property injection to me.  I started searching related to\nTypedFactoryFacility and property injection.  I pretty quickly came upon this documentation:\n<a href=\"https://github.com/castleproject/Windsor/blob/master/docs/how-properties-are-injected.md\">https://github.com/castleproject/Windsor/blob/master/docs/how-properties-are-injected.md</a>.</p>\n<p>That page describes how Windsor does property injection, which I actually thought was\nan opt-in feature of Windsor.  In fact, Windsor does it by default, as describe on that page.</p>\n<p>Combining this revelation (to me) with the fact that TypedFactoryFacility also allows you\nto take a dependency on a simple <code class=\"highlight-text\">Func</code> and turn it into a factory call into your Windsor\ncontainer, I concluded that, by turning on the TypedFactoryFacility in Windsor, I was opening\nup public properties that had <code class=\"highlight-text\">Func&lt;&gt;</code> types to property injection by Windsor.</p>\n<p>Now, I hate property injection, so I was fine with just turning it off completely.  Luckily,\nthe documentation link above also included instructions how to do it. I've included that code\nhere.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> propInjector <span class=\"token operator\">=</span> Kernel<span class=\"token punctuation\">.</span>ComponentModelBuilder\n                         <span class=\"token punctuation\">.</span>Contributors\n                         <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">OfType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PropertiesDependenciesModelInspector<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                         <span class=\"token punctuation\">.</span><span class=\"token function\">Single</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nKernel<span class=\"token punctuation\">.</span>ComponentModelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveContributor</span><span class=\"token punctuation\">(</span>propInjector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I added this code into my Windsor container setup and tried again.  Everything worked just\nas expected.</p>\n<h2>Lessons Learned</h2>\n<p>A couple of quick takeaways:</p>\n<ol>\n<li>Windsor does property injection by default.  Check out the documentation link above for\nthe criteria it uses to determine when it should or not.</li>\n<li>Using TypedFactoryFacility is fantastic, but turn off property injection if you have\npublic <code class=\"highlight-text\">Func&lt;&gt;</code> properties anywhere.</li>\n</ol>","fields":{"slug":"/2016/08/24/castle-windsor-typedfactoryfacility-and-property-injection/"},"frontmatter":{"title":"Castle.Windsor TypedFactoryFacility and Unexpected Property Injection Behavior","formattedDate":"Wed Aug 24th 2016","isoDate":"2016-08-24T12:37:00.000Z","fromNowDate":"4 years ago","categories":["programming"],"tags":[".net","castle-windsor"]}},"site":{"siteMetadata":{"title":"Ben Ramey's Blog","tagline":"Scripture, programming problems, solutions and stories."}},"sitePage":{"path":"/dev-404-page/"}},"pageContext":{"slug":"/2016/08/24/castle-windsor-typedfactoryfacility-and-property-injection/"}},"staticQueryHashes":[]}