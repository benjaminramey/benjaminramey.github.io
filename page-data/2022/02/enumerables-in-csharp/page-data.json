{"componentChunkName":"component---src-templates-post-js","path":"/2022/02/enumerables-in-csharp/","result":{"data":{"markdownRemark":{"html":"<p>Since starting my job in September 2020 at <a href=\"https://www.faithlife.com\">Faithlife</a>, one of the most eye-opening realizations for me was how ignorant I was of\nhow, when and why to use the various C# enumerable types and interfaces.  C# gives you many of them.  It's probably no surprise that they each have a place in your code! It\nprobably should also be no surprise that misusing them can really put a dent in your code's efficiency.</p>\n<p>I've learned a lot since then from the fantastic developers surrounding me at <a href=\"https://www.faithlife.com\">Faithlife</a>.  So, I wanted to start a blog series on the various\nenumerable types and interfaces and give some guidance on when and how to use them well.  I'm also starting this series to push my knowledge on the subject further.  So,\nplease interact and comment with your own recommendations and corrections for me!</p>\n<p>To start us off, here's an example of the type of thing I used to do quite often:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"highlight-csharp\"><code class=\"highlight-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Driver<span class=\"token punctuation\">></span></span> drivers <span class=\"token operator\">=</span> <span class=\"token function\">GetDriversFromDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Car<span class=\"token punctuation\">></span></span> cars <span class=\"token operator\">=</span> <span class=\"token function\">GetCarsFromDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> garages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Garage<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> driver <span class=\"token keyword\">in</span> drivers<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OwnerId <span class=\"token operator\">==</span> driver<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        garages<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Garage</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OwnerId <span class=\"token operator\">==</span> driver<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Doing things like this is not smart and it doesn't take advantage of the enumerables that C# gives you to handle scenarios like this (and many others)\n<em>much</em> more efficiently.</p>\n<p>I'm sure you can see why the above code is not great.  But, if you're new to C# (or like me when I was writing stuff like that and just hadn't\nput too much thought into using enumerable types well) then you should know that the problem with that code is that you loop through the entire <code class=\"highlight-text\">cars</code> list for every\niteration through the <code class=\"highlight-text\">drivers</code> <code class=\"highlight-text\">foreach</code> loop.</p>\n<p>Is there a better way?  There sure is!  Keep tabs on this series as I go through C#'s enumerables and you'll soon know how to solve a simple problem (and many others!) like the one above\nmuch more efficiently.</p>\n<p>To view the entire series, you can use the tag <a href=\"https://www.benramey.com/tags/enumerables/\">\"enumerables\"</a>.</p>","fields":{"slug":"/2022/02/enumerables-in-csharp/"},"frontmatter":{"title":"Enumerables in C#","formattedDate":"Thu Feb 10th 2022","isoDate":"2022-02-10T10:30:00.00-0500","fromNowDate":"5 days ago","categories":["programming"],"tags":["csharp","enumerables"]}},"site":{"siteMetadata":{"title":"Ben Ramey's Blog","tagline":"Scripture, programming problems, solutions and stories."}},"sitePage":{"path":"/dev-404-page/"}},"pageContext":{"slug":"/2022/02/enumerables-in-csharp/"}},"staticQueryHashes":[]}